-- 1.
-- The Movie which was rented the maximum Number of times:
-- The films: "Scalawag Duck", "Juggler Hardly" and "Shock Cabin" were rented the most number of times

SELECT 
	f.title AS filmTitle,
	COUNT(*) as cntRental
FROM 
	payment pay,rental rent,inventory inv,film f 
WHERE 
	pay.rental_id = rent.rental_id AND
	rent.inventory_id = inv.inventory_id AND
	inv.film_id = f.film_id
GROUP BY 
	filmTitle
ORDER BY 
	cntRental DESC;

-- 2.
-- The Rental Earnings generated most by a film:
-- The film: "Telegraph Voyage" earned the most amount of rental money.

SELECT 
	f.title AS filmTitle, 
	SUM(amount) AS sumRentalAmt
FROM 
	payment pay,rental rent,inventory inv,film f 
WHERE 
	pay.rental_id = rent.rental_id AND
	rent.inventory_id = inv.inventory_id AND
	inv.film_id = f.film_id
GROUP BY 
	filmTitle
ORDER BY 
	sumRentalAmt DESC;
	
-- 3.
-- Which special features makes the Films most likely to be rented?
-- This shows that Trailers, Commentary by Actors/Celebrities and BTS has more importance over other special features.

SELECT 
	special_features, 
	COUNT(rental_duration) AS cntRentDuration,
	SUM(rental_rate) AS sumRentalRate
FROM 
	Film
GROUP BY 
	special_features
ORDER BY 
	cntRentDuration DESC, sumRentalRate DESC;
	
-- 4.
-- Top 3 and Bottom 3 Customer with Minimum and Maximum Collective Rental Amount 
-- First We get the Lowest 3 Customers & Union them with the Highest 3 Customers and then just sort them in Descending order to get the Top 3 at the Top and the Bottom 3 later
-- So in Short Record Number 1,2,3 are the Highest 3 Customers and 6,5,4 are the Lowest 3 Customers

SELECT custName, rentalAmt from (

(SELECT CONCAT(cust.first_name,' ', cust.last_name ) as custName, 
SUM(amount) as rentalAmt from 
payment pay,rental rent, customer cust 
WHERE 
pay.rental_id = rent.rental_id AND
rent.customer_id = cust.customer_id AND
return_date IS NOT NULL
group by custName order by sum(amount) ASC
LIMIT 3)
UNION
(SELECT CONCAT(cust.first_name,' ', cust.last_name ) as custName, 
SUM(amount) as rentalAmt from 
payment pay,rental rent, customer cust 
WHERE 
pay.rental_id = rent.rental_id AND
rent.customer_id = cust.customer_id AND
return_date IS NOT NULL
group by custName order by sum(amount) DESC
LIMIT 3
)
	ORDER BY rentalAmt DESC
) AS temp;

-- 5.
/*
	Name of the Actors in Descending Order of their appearances Count in films
	The Actress "Gina Degeneres" comes out of Top with 42 Movies.
	The reason I have added the ACTOR.actor_id in the GROUP BY Clause is because there are two Actresses with the same name "Susan Davis"
*/

SELECT 
	CONCAT( first_name, ' ', last_name) AS actorName,
	COUNT(*) AS cntActor
FROM 
	ACTOR
JOIN FILM_ACTOR ON ACTOR.actor_id = FILM_ACTOR.actor_id
GROUP BY actorName, ACTOR.actor_id
ORDER BY cntActor DESC;


-- 6.
/*
	By Using CTL's I found out the Revenue generated by All Films and Films with Certain Keywords like 'SQL' or 'Tech' in the description
	The Total Revenue Generated is 61312.04 and the Revenue Generated by using Techie Keywords is 20998.01 which is 1/3rd of the total Revenue
	So I think implementing a NLP Model For Targeted Marketing by using certain keywords would definitely be useful to catch & retain Customers
*/

WITH total_revenue AS (
SELECT 
	f.title AS filmTitle, 
	SUM(amount) AS sumRentalAmt
FROM 
	payment pay,rental rent,inventory inv,film f 
WHERE 
	pay.rental_id = rent.rental_id AND
	rent.inventory_id = inv.inventory_id AND
	inv.film_id = f.film_id
GROUP BY 
	filmTitle
ORDER BY 
	sumRentalAmt DESC
)

SELECT SUM(sumRentalAmt) AS sumTotal from total_revenue;

-- Total Revenue = 61312.04

with tech_revenue AS (
SELECT 
	title,
	SUM(amount) as sumAmount,
	COUNT(rental_duration) as cntRentalDuration
FROM 
	film
JOIN 
	inventory ON FILM.film_id = inventory.film_id
JOIN 
	rental ON inventory.inventory_id = rental.inventory_id
JOIN 
	payment ON rental.rental_id = payment.rental_id
WHERE 
	FILM.film_id IN (
	SELECT 
		film_id FROM Film 
	WHERE 
	description like '%Database%' OR description like '%SQL%' OR 
	description like '%Tech%' OR description like '%Robot%' OR
	description like '%Scientist%'
)
GROUP BY FILM.film_id
ORDER BY sumAmount DESC, cntRentalDuration DESC
)

SELECT SUM(sumAmount) AS sumTech from tech_revenue;

-- Tech Revenue = 20998.01

-- 7.
/*
	Select Active Customers from Each Country with the Total Amount they Spent, Grouped Countrywise
	Here Active = 1 indicates that they are the active Customers
*/

SELECT 
	country,
	COUNT (DISTINCT Customer.customer_id) as cntCountryCustomers,
	SUM(amount) as sumCountryAmount
FROM 
	Customer
JOIN Address 
	ON Address.address_id = Customer.address_id
JOIN City 
	ON City.city_id = Address.city_id
JOIN Country 
	ON Country.country_id = City.country_id
JOIN Payment 
	ON Payment.customer_id = Customer.customer_id
AND 
	active = 1
GROUP BY 
	country
ORDER BY 
	cntCountryCustomers DESC;
	
-- 8.
-- We find out that the Count of Rentals is directly proportional to the Replacement Cost when we group them by the Special Features

SELECT 
	special_features,
	SUM(replacement_cost) AS sumReplacementCost,
	COUNT(rental_duration) AS cntRentDuration
FROM 
	FILM
GROUP BY 
	special_features
ORDER BY 
	cntRentDuration DESC, sumReplacementCost DESC;
	
-- 9.
-- Get Company-Wide Staff Information - Old

SELECT 
	First_Name, 
	Last_Name, 
	Email, 
	Phone,
	Address, 
	City, 
	District AS Province_State, 
	Country
FROM Staff
INNER JOIN 
	Address 
	ON Address.address_id = Staff.address_id
INNER JOIN 
	City 
	ON City.city_id = Address.city_id
INNER JOIN 
	Country 
	ON Country.country_id = City.country_id;
	
-- Get Company-Wide Staff Information - Updated

SELECT 
	First_Name, 
	Last_Name, 
	Email, 
	Phone,
	Address, 
	City, 
	(
	CASE
		WHEN
			District = 'QLD' THEN 'Queensland'
		ELSE
			District
	END) AS Province_State,
	Country
FROM Staff
INNER JOIN 
	Address 
	ON Address.address_id = Staff.address_id
INNER JOIN 
	City 
	ON City.city_id = Address.city_id
INNER JOIN 
	Country 
	ON Country.country_id = City.country_id;
	
-- 10. Initial 
/*
	Get List of Categories and Movies played by Actors grouped by ActorID
*/

SELECT
	actor.first_name,
	actor.last_name,
	Name,
	Title
FROM
	film
INNER JOIN 
	film_category ON film_category.film_id = film.film_id
INNER JOIN 
	category ON category.category_id = film_category.category_id
INNER JOIN 
	film_actor ON film_actor.film_id = film.film_id
INNER JOIN 
	actor ON actor.actor_id = film_actor.actor_id
GROUP BY 
	actor.actor_id, Name, Title
ORDER BY 
	actor.actor_id;
	
-- 10. Semi-Final 
/*
	Get List of Categories and Movies played by Actors Grouped By ActorID
	Here we initially joined all the necessary Tables.
	Then Since String Aggregate function, STRING_AGG() takes first argument as value, second as Separator and third as order by, 
	We had to Concatenate Name and Title with [ str1 || seperator || str2 ] Syntax and then Seperate using ',' and Order by CategoryName
*/


SELECT
	actor.first_name,
	actor.last_name,
	STRING_AGG( 
				Name || ' : ' || Title, 
				' , ' 
				ORDER BY Name ASC
			  ) AS filName_by_category 
FROM
	film
INNER JOIN 
	film_category USING(film_id)
INNER JOIN 
	category USING(category_id)
INNER JOIN 
	film_actor USING(film_id)
INNER JOIN 
	actor USING (actor_id)
GROUP BY 
	actor.actor_id
ORDER BY 
	actor.actor_id;
	
	
-- 10. Final
 -- Refactored Query to Use STRING_AGG() and STRING_TO_ARRAY() functions to mimic a JSON like Structure
 /*
	Get List of Categories and Movies played by Actors Grouped By ActorID
	Here we initially joined all the necessary Tables.
	Then Since String Aggregate function, STRING_AGG() takes first argument as value, second as Separator and third as order by, 
	We had to Concatenate Name and Title with [ str1 || seperator || str2 ] Syntax and then Seperate using ',' and Order by CategoryName
*/


SELECT
	actor.first_name,
	actor.last_name,
	STRING_TO_ARRAY
	(
		STRING_AGG	(
						Name || ' : ' || Title,
						' , '
						ORDER BY Name ASC
					),
		' , '		
	) AS filName_by_category
FROM
	film
INNER JOIN 
	film_category USING(film_id)
INNER JOIN 
	category USING(category_id)
INNER JOIN 
	film_actor USING(film_id)
INNER JOIN 
	actor USING (actor_id)
GROUP BY 
	actor.actor_id
ORDER BY 
	actor.actor_id;